Union-Find Node-Suspension decoder

In this section, we describe the Union-Find Node-Suspension decoder, that increases the Union-Find decoder's performance by improving its heuristic for minimum-weight matching. We first introduce the concept of the potential matching weight in X. We describe the data structure required for this decoder in X, and the necessary calculations performed on this data structure in X, X and X. The pseudocode is included in X. 

\Figure[htb](topskip=0pt, botskip=0pt, midskip=0pt)tikzfigs/tikz-figure0.pdf{
    A cluster with vertices X with potential matching weights X. The line style and color of the colored edges corresponds to the matching in the hypothetical union with an external vertex X of the same line style and color.

Potential matching weight

Consider the cluster with index i containing the set of non-trivial vertices X and set of edges X of Figure X. Now let us investigate the weight of a matching if an additional non-trivial vertex X is connected to the cluster. If X is connected to X or to X, then the resulting matching has a total weight of 2: X and X, or X and X. However, if X is connected to vertex X, then the total weight is 3: X and X. Inspired by this idea, we introduce the concept of potential matching weight (PMW) of a vertex. 

definition
    Let there be a hypothetical merger between odd cluster X of vertices X and edges X, and odd cluster X of X and X, on the edge X, where X and X. In the merged even cluster with edges X, there is a matching X  between the syndrome vertices internal to the cluster. The Potential Matching Weight (PMW) of vertex X is then defined as
definition

In other words, the PMW is a vertex-specific predictive heuristic to the matching weight, assuming a union occurs in the next growth iteration. The PMW can be utilized by prioritizing the growth of vertices with low PMW such that there is an increased probability of mergers between clusters on edges connected to these vertices, and there is an increased probability in a lower matching weight. However, the calculation of the PMW's within a cluster is not a trivial task, especially for clusters of increasingly larger size, as all edges of a cluster must be considered in its calculation. Furthermore, the PMW's within a cluster change due to cluster growth and mergers, both of which occur more frequently as the system size is increased. For this reason, the scaling of the PMW computation is vital to the decoder. 

\Figure[htb](topskip=0pt, botskip=0pt, midskip=0pt)tikzfigs/tikz-figure1.pdf{
    The cluster of Figure X after two round of prioritized growth of X and X. There are regions of vertices that are either interior elements or have equal potential matching weights, which can be represented as nodes with different node radii in the node-tree X. 

Node-Suspension data structure

Fortunately, the PMW calculation is quite efficient by the introduction of a new data structure. Consider the cluster of non-trivial vertices X and edges X from Figure X. We had found previously that vertices X have a lower PMW compared to X by 1 edge. The growth of X and X are thus prioritized, such that new vertices are added to the cluster on the boundary of X and X. If all newly added vertices are trivial, the cluster is now as in Figure X. If we repeat the PMW calculation, we now find that the PMW's in the new vertices connected to X are equal, and the same is true for vertices connected to X. 
definition
    Let the vertex-tree X be a connected acyclic subgraph of the graph of a cluster X.   The vertex-tree X includes all vertices X and a minimum number of edges in X. 
definition
definition
  Let the node-tree X be a partition of the vertex-tree X, such that each element of the partition --- a node n --- consists of a set of adjacent vertices that lie within a certain distance --- the node radius r --- from the primer vertex, which initializes the node and lies at its center. The node-tree is a directed acyclic graph, and its edges X have lengths equal to the distance between the primer vertices of neighboring nodes. 
definition

The concept of primer vertices is easily understood when considering non-trivial vertices of the syndrome X. If every non-trivial vertex is the primer of a node, the weight of a matching in X equal to the weight of the same matching in X. Furthermore, for every node of the node-tree, all vertices that lie at distance r to the primer vertex are either boundary vertices to the cluster and have equal PMW, or lie within the radius of another node. For the example in Figure X, the PMW of all boundary vertices of X, for simplicity just the PMW of X, is X. The partition from X to X thus allows us to compute the PMW on a reduced tree. 

\Figure[htb](topskip=0pt, botskip=0pt, midskip=0pt)tikzfigs/tikz-figure2.pdf{
    Two different types of nodes. Syndrome-nodes s have a non-trivial vertex or syndrome at its center. Vertices that lie on the radii of two existing nodes initialize a junction-node j in the node-tree.

\Figure[hbt](topskip=0pt, botskip=0pt, midskip=0pt)tikzfigs/tikz-figure3.pdf{
    The relevant data structures. (a) The cluster-tree of the Union-Find data structure. The path from a vertex to the root of the cluster-tree is traversed to find the root element in order to differentiate between clusters. The root node of the node-tree is now additionally stored at the root of the cluster-tree. (b) The vertex-tree X with 9 non-trivial vertices. As X is strictly acyclic, the edges of the cluster must be maintained such that no cycles are created. This is done during growth by removing edges (red dotted lines) if a cycle is detected. (c) The node-tree X, which currently has the same number of elements as X as all vertices are non-trivial. Two depth-first searches are required to compute node parities (head recursively) and delays (tail recursively) in X.

All non-trivial vertices serve as primers for nodes that are called syndrome-nodes s. However, not all primer vertices are non-trivial vertices of the syndrome. If two non-trivial vertices are located an even Manhattan distance on the lattice, the growth of their clusters can simultaneously reach some vertex that lies on equal radii of the associated nodes, such as in Figure X. For this reason, such vertices serve as primers of a different type of node --- a junction-node j --- in the merged node-tree. 

The calculation of the PMW on the node-tree X rather than the vertex-tree X offers a reduction in the cost. However, it is still no trivial task as the entire tree must be considered for the calculation in each node. Instead, we will compute for the node suspension X --- the number of growth iterations needed for a node to reach the maximum PMW in the node-tree --- which relates closely to the PMW. For example, the node suspension for the nodes X associated with the vertices X in Figure X is X, and X in Figure X.

The Node-Suspension data structure does not replace but coexists with the Union-Find data structure. Additional to the cluster-trees of distinct roots of the Union-Find data structure, we store for each cluster the node-tree X by its root node. For this, we need to maintain the reduced set of edges X of the vertex-trees X for every cluster, which can be done in constant time (see Algorithm X). In the UF decoder, vertex-trees X are not maintained, such that the graph associated with each cluster is not acyclic [0]. Instead, a spanning forest F of all clusters is created [0] after growth, which are also acyclic connected graphs. The difference is that while F is created by a single depth-first search or breath-first-search, X is equivalent to multiple breadth-first searches from each non-trivial vertex within the cluster, where the search of every breadth occurs during a growth iteration. The relevant data structures are depicted in Figure X. 


Node parity, delay and suspension

The Node-Suspension data structure allows for the calculation of the node suspension of all nodes in a node-tree X by two intermediate steps. In each step a depth-first-search (DFS) of X is applied from its root node r (Figure Xc).

In the first DFS, we calculate for the node parity X --- the number of descendant syndrome-nodes of a node modulo 2 --- via a tail recursive function, which is only dependent on the node parities of the children nodes of a node. The node parity is defined differently per node type:

In the second DFS, we calculate for the difference in node suspension of a node n with its parent m; X. We can choose an arbitrary node delay X --- the node suspension minus the maximum node suspension in the node-tree --- for the root node r such as X and add the suspension difference X during each step to obtain X for every node. This node delay of a node n is only dependent on the node radii of itself and of its parent m, the length of edge X and its parity X. 
multline
    n_d = m_d + \bigg \lceil 2C\big(n_r - m_r + n_r \bmod 1
    - (-1)^n_p(n,m)\big) - 2(n_r - m_r) \bmod2 \bigg \rceil
multline
Here, the inversion constant C deals with the inversion of node parities in a node-tree during merges of clusters, explained in X. The node suspension is then related to the node delay by
The maximum node delay can be maintained during the second DFS of the node-tree, and the node suspension itself is calculated during cluster growth. A single growth iteration, which is applied in the UF decoder by adding half-edges to all boundary vertices of the cluster, is now replaced by another DFS of X. During this DFS, we calculate the suspension X for a node, and conditionally grow it - adding half-edges to the boundary vertices in the current node and adding 1 to its radius X --- if X. This requires us to save the list of boundary vertices to each node (Figure Xc). When all X in X are zero, all nodes are grown simultaneously within the same iteration. 

If the node-tree does not change after a growth iteration, which is the case if no mergers occur between clusters, the node suspensions decrease in an expected manner: For all nodes that are not suspended from growth, their node suspensions decrease with 1 in the next growth iteration. Due to this behavior, we can re-use the node delays X to calculate X for the next growth iteration by introducing another node parameter X, the number of iterations a node has waited. Each time a node is suspended from growth, we add 1 to X. The node suspension in subsequent iterations is then
Note that we have not stated which node in X should be the root node. In fact, any node in X could have been picked as the root of the node-tree. As long as the DFS of cluster growth is performed in the same direction as the DFS's of the parity and delay calculations, and if no cluster mergers occur, the node delays can be reused in the node suspension calculation prior to node growth. 
The node-tree is constructed by storing all neighbors of a node to a list. This way, the direction of the DFS's can be determined by simply saving the root node, the starting point of the DFS's, to the cluster. All node variables are depicted in Figure Xc. 


Joining node-trees

In the Union-Find (UF) algorithm, odd parity clusters of an odd number of non-trivial vertices, --- elements of X --- grow in size repeatedly and merge with other clusters until all clusters are even. During these mergers, the node-trees of the Node-Suspension data structure must also be combined. Let us now first make a clear distinction between the merging protocols of the underlying data structures; the clusters-trees of the UF data structure are merged with the Union function, whereas the node-trees are merged with a separate Join function. After a join of multiple node-trees, the node suspensions within the combined node-tree change. The focus of the Join protocol is therefore to minimize the DFS's of the recalculation of the node parity and delays in the combined node-tree. 

First, note that as a cluster of even parity has an even number of non-trivial vertices, its node-tree has an even number of syndrome-nodes. For these even node-trees, the concept of PMW does not exist, as the matching can be made within the node-tree. Consequently, node suspension, parity and delays are undefined when two odd node-trees join to an even node-tree. 

\Figure[hbt](topskip=0pt, botskip=0pt, midskip=0pt)tikzfigs/tikz-figure4.pdf{
    (a) An odd cluster X with root X joins with an even cluster X with root X on nodes X, respectively, to a joined node-tree. If we choose to (b), make X a child of X, the parities and delays the sub-tree of X can unchanged, and we only have to perform partial parity and delay calculations over the sub-tree of X. If we choose to (c), make X a child of X, parities and delays have to be recalculated in the entire joined node-tree. 

A second type of merger is the between an even and an odd cluster. The combined cluster is odd and its growth is continued, thus its node suspensions must be computed. Consider the example of odd node-tree X and even node-tree X that are to be joined on nodes X and X (Figure Xa). If the root of X is kept as the root of the joined node-tree (Figure Xb), X is to be a child node of X. As X contains an even number of syndrome-nodes, the node parities in X do not change. Hence, the node parity DFS is only necessary in the sub-tree of X, which now has X as sub-root. Furthermore, as the node delay is only dependent on properties of itself and its parent, the node delay DFS is also only required from node X and within the sub-tree of X. These so-called partial DFS's of the node-tree are exactly what was required, as the node parity and delays in X were undefined. Alternatively, if the root of X becomes the root of the combined tree (Figure Xc), an odd number of syndrome-nodes are attached to X, such that the parities of nodes on the path from X to the root are changed. Such a join would require the DFS's on the entire combined node-tree to calculate for node parities and delays. A simple rule is thus to always keep the root of the odd node-tree, which we dub Odd-Rooted Join.

In addition, a cluster can be subjected to multiple mergers within the same growth iteration, during which the parity of the merged cluster changes dependent on the number of mergers and the parities of the clusters involved. The DFS's related to the parity and delay calculations must for this reason not be initiated directly after the joining of node-trees. After all, it may be possible for the cluster to merge again such that the parities and delays become invalid. To prevent these redundant calculations, sub-roots of the even sub-trees are stored to a list X at the root of the node-tree (Figure Xc). When multiple mergers occur, the root node that stores the now redundant sub-roots is replaced by a new root with new X. If a cluster is selected for growth, we check for the sub-roots in X at the new root node, and initiate the DFS's from these sub-roots. We call this the Root List X Replacement. 

\Figure[htb](topskip=0pt, botskip=0pt, midskip=0pt)tikzfigs/tikz-figure5.pdf{
    The node suspension values for nodes for 3 odd node-trees X of 3 nodes that grow and join into a single node-tree. (a) Node suspensions are calculated by setting X in equation X. In step 1, the growth in the outer nodes of each of the three node-trees are prioritized and the node-trees merge. In step 2, recalculation of the joined node-tree is performed. Parities within the sub-tree of X are now inverted, and the suspension in these nodes have doubled. (b) Node suspensions are calculated by setting X. Now the increase in node suspensions after parity inversion is halved.

Parity inversion
An unfortunate effect of the Node-Suspension data structure, which we dub Parity Inversion, causes a decrease in the performance of the algorithm as the lattice size is increased. We will demonstrate this effect through the example in Figure Xa. Consider three instances of the node-tree of Figure X; X, positioned closely to each other on the lattice. For each of the node-trees, if the middle node is suspended from growth for two iterations, all nodes in the node-tree have the same Potential Matching Weight. However, in the current example, the node-trees X merge after 1 iteration. The combined node-tree is odd, thus we recalculate the node parities and delays to find that the parities in the partition of the node-tree containing the nodes of X have been inverted, and the node suspensions in this partition have doubled from before node suspensions before the merger. If the next merging event occurs on the node with the doubled node suspension, the matching weight may be larger compared to the original UF decoder, which defies the goal of Node-Suspension to decrease the weight.

This defines a trade-off in the Node-Suspension data structure; a node must wait as many iterations as it is suspended to reach equilibrium in Potential Matching Weight in the node-tree, but after Parity Inversion, the node suspension for previously prioritized nodes increase linearly with the number of iterations waited by the suspended nodes pre-inversion. As a compromise, we redefine the node suspension as half the number of growth iterations needed for all nodes in the node-tree to reach equal PMW. This can be done by setting X in Equation X. Nevertheless, as more inversions occur, the maximum node suspension in the node-tree increases, and it becomes more and more unlikely for a cluster to actually reach zero node suspension in all nodes. The number of inversions is directly related to the number of merging events, and thus the size of the lattice. The performance to improve the heuristic for minimum weight matching thus decreases for larger lattices. 

